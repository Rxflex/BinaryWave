{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "binary-wave",
  "type": "registry:ui",
  "description": "A beautiful, customizable React component that creates flowing waves of binary digits",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui/binary-wave.tsx",
      "content": "\"use client\"\n\nimport { useEffect, useRef, useState } from \"react\"\n\ninterface BinaryWaveProps {\n  width?: number\n  height?: number\n  density?: number\n  speed?: number\n  colors?: {\n    background?: string\n    primary?: string\n    secondary?: string\n  }\n  waveAmplitude?: number\n  waveFrequency?: number\n  fontSize?: number\n  className?: string\n}\n\ninterface BinaryDigit {\n  x: number\n  y: number\n  value: string\n  opacity: number\n  speed: number\n  phase: number\n}\n\nexport const presets = {\n  screenshot: {\n    density: 200,\n    speed: 0.3,\n    waveAmplitude: 60,\n    waveFrequency: 0.008,\n    fontSize: 12,\n    colors: {\n      background: \"#000000\",\n      primary: \"#ffffff\",\n      secondary: \"#cccccc\",\n    },\n  },\n  ocean: {\n    density: 180,\n    speed: 0.6,\n    waveAmplitude: 80,\n    waveFrequency: 0.015,\n    fontSize: 16,\n    colors: {\n      background: \"#001122\",\n      primary: \"#00ddff\",\n      secondary: \"#0088bb\",\n    },\n  },\n  matrix: {\n    density: 200,\n    speed: 1.5,\n    waveAmplitude: 20,\n    waveFrequency: 0.015,\n    fontSize: 12,\n    colors: {\n      background: \"#000000\",\n      primary: \"#00ff41\",\n      secondary: \"#008f11\",\n    },\n  },\n  storm: {\n    density: 300,\n    speed: 2.5,\n    waveAmplitude: 100,\n    waveFrequency: 0.012,\n    fontSize: 12,\n    colors: {\n      background: \"#111111\",\n      primary: \"#ffffff\",\n      secondary: \"#666666\",\n    },\n  },\n  calm: {\n    density: 120,\n    speed: 0.4,\n    waveAmplitude: 40,\n    waveFrequency: 0.025,\n    fontSize: 18,\n    colors: {\n      background: \"#000808\",\n      primary: \"#88ffff\",\n      secondary: \"#446666\",\n    },\n  },\n}\n\nexport default function BinaryWave({\n  width = 800,\n  height = 400,\n  density = 100,\n  speed = 1,\n  colors = {\n    background: \"#000000\",\n    primary: \"#ffffff\",\n    secondary: \"#888888\",\n  },\n  waveAmplitude = 50,\n  waveFrequency = 0.02,\n  fontSize = 14,\n  className = \"\",\n}: BinaryWaveProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const animationRef = useRef<number>()\n  const [digits, setDigits] = useState<BinaryDigit[]>([])\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const ctx = canvas.getContext(\"2d\")\n    if (!ctx) return\n\n    canvas.width = width\n    canvas.height = height\n\n    const newDigits: BinaryDigit[] = []\n\n    for (let i = 0; i < density; i++) {\n      newDigits.push({\n        x: Math.random() * width,\n        y: Math.random() * height,\n        value: Math.random() > 0.5 ? \"1\" : \"0\",\n        opacity: Math.random() * 0.8 + 0.2,\n        speed: Math.random() * speed + 0.5,\n        phase: Math.random() * Math.PI * 2,\n      })\n    }\n\n    setDigits(newDigits)\n\n    let time = 0\n\n    const animate = () => {\n      ctx.fillStyle = colors.background || \"#000000\"\n      ctx.fillRect(0, 0, width, height)\n\n      ctx.font = `${fontSize}px 'Courier New', monospace`\n      ctx.textAlign = \"center\"\n\n      newDigits.forEach((digit, index) => {\n        const primaryWave = Math.sin(digit.x * waveFrequency + time * 0.008) * waveAmplitude\n        const secondaryWave = Math.sin(digit.x * waveFrequency * 1.7 + time * 0.012) * (waveAmplitude * 0.4)\n        const tertiaryWave = Math.sin(digit.x * waveFrequency * 0.3 + time * 0.006) * (waveAmplitude * 0.8)\n\n        const combinedWave = primaryWave + secondaryWave + tertiaryWave\n        const verticalFlow = Math.sin(time * 0.003 + index * 0.05) * 5\n\n        digit.x -= digit.speed * speed * 0.5\n        const currentY = digit.y + combinedWave + verticalFlow\n\n        const depth = (Math.sin(digit.x * 0.003 + time * 0.004) + 1) * 0.5\n        const depthScale = 0.7 + depth * 0.3\n        const currentFontSize = fontSize * depthScale\n\n        if (digit.x < -fontSize * 3) {\n          digit.x = width + fontSize + Math.random() * 200\n          digit.y = Math.random() * height\n          digit.value = Math.random() > 0.5 ? \"1\" : \"0\"\n          digit.opacity = Math.random() * 0.6 + 0.4\n          digit.speed = Math.random() * speed + 0.2\n        }\n\n        const waveIntensity = (Math.sin(combinedWave * 0.01) + 1) * 0.5\n        const baseOpacity = 0.4 + waveIntensity * 0.6\n        const depthOpacity = 0.3 + depth * 0.7\n        const finalOpacity = digit.opacity * baseOpacity * depthOpacity\n\n        const color = digit.value === \"1\" ? colors.primary || \"#ffffff\" : colors.secondary || \"#cccccc\"\n\n        if (depth < 0.4) {\n          ctx.filter = \"blur(0.5px)\"\n        } else {\n          ctx.filter = \"none\"\n        }\n\n        ctx.font = `${currentFontSize}px 'Courier New', monospace`\n        ctx.fillStyle = `${color}${Math.floor(finalOpacity * 255)\n          .toString(16)\n          .padStart(2, \"0\")}`\n\n        ctx.fillText(digit.value, digit.x, currentY)\n\n        digit.phase += 0.005 * speed\n\n        if (Math.random() < 0.0005) {\n          digit.value = Math.random() > 0.5 ? \"1\" : \"0\"\n        }\n      })\n\n      ctx.filter = \"none\"\n      time += 1\n      animationRef.current = requestAnimationFrame(animate)\n    }\n\n    animate()\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n    }\n  }, [width, height, density, speed, colors, waveAmplitude, waveFrequency, fontSize])\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={className}\n      style={{\n        display: \"block\",\n        background: colors.background,\n      }}\n    />\n  )\n}",
      "type": "registry:ui",
      "target": "components/ui/binary-wave.tsx"
    }
  ]
}
